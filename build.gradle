// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
        classpath 'org.jacoco:org.jacoco.core:0.8.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
//plugins {
//    id "org.sonarqube" version "2.6"
//}
//apply plugin: 'org.sonarqube'
//sonarqube {
//    properties{
//        property "sonar.projectKey", "JacocoTest2"
//        property "sonar.host.url", "http://127.0.0.1:9000"
//        property "sonar.projectVersion", "1.4"
//        property "sonar.login", "96aee300ba973cbcb5ce6ec8c6ae8a240139ca78"
//
//        property "sonar.sources", "src/main/java"
//        property "sonar.binaries", "build/intermediates/classes/debug"
//        property "sonar.java.binaries", "build/intermediates/classes/debug"
//        property "sonar.tests", "src/test/java, src/androidTest/java"
//        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
//
//        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files
//        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files
//        unit.addAll(ui)
//        def files = unit.join(", ")
//
//        def flavorName = ''
////        property "sonar.jacoco.reportPaths", files
////        property "sonar.java.coveragePlugin", "jacoco"
////        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
////        property "sonar.android.lint.report", "build/reports/lint-results.xml"
//
//        property 'sonar.java.binaries', 'build/intermediates/classes/' + flavorName + "/debug"
//        property 'sonar.java.test.binaries', 'build/intermediates/classes/' + flavorName + "/debug"
//        property 'sonar.junit.reportsPath', 'build/test-results/test' + flavorName.capitalize() +'DebugUnitTest'
//        property 'sonar.jacoco.reportPath', fileTree(dir: project.projectDir, includes: ['**/*.exec'])
//        property 'sonar.jacoco.itReportPath', fileTree(dir: project.projectDir, includes: ['**/*.ec'])
//        property 'sonar.java.coveragePlugin', 'jacoco'
//        property 'sonar.exclusions', '**/*.js,**/*.css,**/*.html'
//    }
//}

//sonarqube {
//    def flavorName = ''
//    if (project.hasProperty('flavor')) {
//        //read the flavor from properties.
//        flavorName = flavor
//        androidVariant flavorName + "Debug"
//    } else {
//        androidVariant 'debug'
//    }
//    properties {
//        property 'sonar.host.url', 'http://127.0.0.1:9000'
//        property "sonar.projectName", "JacocoTest2"
//        property "sonar.projectKey", "JacocoTest2"
//        property 'sonar.java.source', '8'
//        property 'sonar.sourceEncoding', 'UTF-8'
//        property "sonar.login", "admin"
//        property "sonar.password", "admin"
//        property "sonar.projectVersion", "1.4"
//
//        property 'sonar.java.binaries', 'build/intermediates/classes/' + flavorName + "/debug"
//        property 'sonar.java.test.binaries', 'build/intermediates/classes/' + flavorName + "/debug"
//        property 'sonar.junit.reportsPath', 'build/test-results/test' + flavorName.capitalize() +'DebugUnitTest'
//        property 'sonar.jacoco.reportPath', fileTree(dir: project.projectDir, includes: ['**/*.exec'])
//        property 'sonar.jacoco.itReportPath', fileTree(dir: project.projectDir, includes: ['**/*.ec'])
//        property 'sonar.java.coveragePlugin', 'jacoco'
//        property 'sonar.exclusions', '**/*.js,**/*.css,**/*.html'
//    }
//}
